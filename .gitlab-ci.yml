image: node:20.11.1-bullseye-slim
stages:
  - unit-test
  - OWASP-Trivy
  - build
  - test
  - deliver
  - deploy


variables:
  CONTAINER_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
  CLUSTER_NAME: mycluster

services:
  - docker:24.0.6-dind

unit-test-dependencies:
  stage: unit-test
  script:
    - echo "Installing dependencies for unit-tests"
    - npm install supertest mocha --save-dev
    - npm install jsdom --save-dev
    - npm install -y

#Performing Continous Integration
#Unit-Tests
unit_testing:
  needs: [unit-test-dependencies] 
  stage: unit-test
  script:
    - echo "Running unit tests on the application..."
    - npm test

OWASP_dependency_check:
  needs: [unit_testing]
  image:
    name: registry.gitlab.com/gitlab-ci-utils/docker-dependency-check:latest
    entrypoint: [""]
  stage: OWASP-Trivy
  script:
    # Job will scan the project root folder and fail if any vulnerabilities with CVSS > 2 are found
    - >
      /usr/share/dependency-check/bin/dependency-check.sh --scan "./" --format ALL
      --project "$CI_PROJECT_NAME" --failOnCVSS 1
  allow_failure: true
  artifacts:
    when: always
    paths:
        # Save the HTML and JSON report artifacts
      - "./dependency-check-report.html"
      - "./dependency-check-report.json"

Trivy-fs-scanning:
  stage: OWASP-Trivy
  image:
    name: aquasec/trivy:latest
    entrypoint: [""]
  script:
    - trivy fs .    

container_scanning:
  variables:
    CS_DEFAULT_BRANCH_IMAGE: $CI_REGISTRY_IMAGE/$CI_DEFAULT_BRANCH:$CI_COMMIT_SHA

docker_build:
  image: docker
  services:
    - docker:24.0.6-dind
  stage: build
  script:
    - echo "Building Docker image..."
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker build -t $CONTAINER_IMAGE .
    - docker push $CONTAINER_IMAGE
    - |
      if [ -n "$CI_COMMIT_TAG" ]; then
        echo "Tagging Docker image with Git tag..."
        docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
        docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
      fi

include:
  - template: Jobs/Container-Scanning.gitlab-ci.yml

# CD Stage
deploy_to_staging:
  image: 
    name: alpine/helm:3.12.3
    entrypoint: [""]
  stage: deliver
  before_script:
    - apk add --no-cache curl python3 py3-pip
    - pip3 install awscli
    - echo -n "$CI_JOB_TOKEN" | helm registry login -u gitlab-ci-token --password-stdin $CI_REGISTRY

  script:
    - helm repo add gitlab-registry https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/packages/helm/stable
    - aws eks update-kubeconfig --region eu-west-1 --name $CLUSTER_NAME
    - |
      if [ -n "$CI_COMMIT_TAG" ]; then
        helm upgrade --install --set image.tag=$CI_COMMIT_TAG mynodejsapp gitlab-registry/nodejsapp-chart --namespace staging  
      else
        helm upgrade --install --set image.tag=$CI_COMMIT_SHORT_SHA mynodejsapp gitlab-registry/nodejsapp-chart --namespace staging  
      fi
  only:
    - main
    - tags

# CD Stage
deploy_to_production:
  image:
    name: alpine/helm:3.12.3
    entrypoint: [""]
  stage: deploy
  before_script:
    - apk add --no-cache curl python3 py3-pip
    - pip3 install awscli
    - echo -n "$CI_JOB_TOKEN" | helm registry login -u gitlab-ci-token --password-stdin $CI_REGISTRY
  variables:
    IMG_VERSION: $CI_COMMIT_SHORT_SHA
  script:
    - helm repo add gitlab-registry https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/packages/helm/stable
    - aws eks update-kubeconfig --region eu-west-1 --name $CLUSTER_NAME
    - helm upgrade --install --set image.tag=$IMG_VERSION pingpong gitlab-registry/nodejsapp-chart --namespace production
  when: always
  only:
    - main
